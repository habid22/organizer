version: '3.8'

services:
  # SQLite Database (no separate service needed)

  # Redis for Celery
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=sqlite:///./downloads_organizer.db
      - REDIS_URL=redis://redis:6379/0
      - DOWNLOADS_PATH=/app/downloads
    volumes:
      - ./downloads:/app/downloads
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=sqlite:///./downloads_organizer.db
      - REDIS_URL=redis://redis:6379/0
      - DOWNLOADS_PATH=/app/downloads
    volumes:
      - ./downloads:/app/downloads
      - ./backend:/app
    depends_on:
      redis:
        condition: service_healthy
    command: celery -A app.core.celery worker --loglevel=info

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      - API_URL=http://backend:8000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    command: npm run dev

# No volumes needed for SQLite
